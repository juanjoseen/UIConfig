// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name UIConfig
import Foundation
import Swift
@_exported import UIConfig
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Swift.String {
  public var localized: Swift.String {
    get
  }
  public func isValidEmail() -> Swift.Bool
}
extension Swift.Double {
  public static let minute: Swift.Double
  public static let hour: Swift.Double
  public static let day: Swift.Double
  public static let week: Swift.Double
}
public protocol GenericSelectionDelegate : AnyObject {
  func didCancel(selection: UIConfig.GenericSelection)
  func didSelect(_ selection: UIConfig.GenericSelection, index: Swift.Int)
  func didSelect(_ selection: UIConfig.GenericSelection, indexes: [Swift.Int])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GenericSelection : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any UIConfig.GenericSelectionDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String? = nil, accept: Swift.String = "Aceptar", options: [Swift.String], multipleSelection: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) public func selectIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) public func selectIndexes(_ indexes: [Swift.Int])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIColor {
  public static var titleColor: UIKit.UIColor {
    get
  }
  public static var textColor: UIKit.UIColor {
    get
  }
  public static var textLight: UIKit.UIColor {
    get
  }
  public static var bgColor: UIKit.UIColor {
    get
  }
  public static var success: UIKit.UIColor {
    get
  }
  public static var failure: UIKit.UIColor {
    get
  }
  public static var info: UIKit.UIColor {
    get
  }
  public static var warning: UIKit.UIColor {
    get
  }
  public static var lineColor: UIKit.UIColor {
    get
  }
}
@_hasMissingDesignatedInitializers open class Georgia {
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func boldItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Helvetica {
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func boldItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func light(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Verdana {
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func boldItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Avenir {
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func light(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func lightItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func medium(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Baskerville {
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func italic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func semiBold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func semiBoldItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func bold(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func boldItalic(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) convenience public init(text: Swift.String? = nil, color: UIKit.UIColor = .textColor, font: UIKit.UIFont, alignment: UIKit.NSTextAlignment = .left)
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public var mainWindow: UIKit.UIWindow? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class HintTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) convenience public init(hint: Swift.String, padding: CoreFoundation.CGFloat = 0, borderWidth: CoreFoundation.CGFloat = 0, borderColor: UIKit.UIColor = .clear, radius: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum ToastType {
  case Success
  case Error
  case Info
  public static func == (a: UIConfig.ToastType, b: UIConfig.ToastType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class GenericToast : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(type: UIConfig.ToastType, message: Swift.String, time: Foundation.TimeInterval = 3.0)
  @_Concurrency.MainActor(unsafe) public func showIn(_ view: UIKit.UIView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol GenericSheetDelegate : AnyObject {
  func didCancelSheet(_ sheet: UIConfig.GenericSheet)
  func sheet(_ sheet: UIConfig.GenericSheet, didSelect index: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GenericSheet : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var dissmissOnBackgroundTouch: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any UIConfig.GenericSheetDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String? = nil, message: Swift.String? = nil, buttons: [Swift.String], cancelTitle: Swift.String = "Cancelar")
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UICollectionViewCell {
  @_Concurrency.MainActor(unsafe) public static var identifier: Swift.String {
    get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public func registerCell(type: UIKit.UICollectionViewCell.Type)
  @_Concurrency.MainActor(unsafe) public func dequeueCell<T>(withType type: UIKit.UICollectionViewCell.Type, for indexPath: Foundation.IndexPath) -> T? where T : UIKit.UICollectionViewCell
}
extension UIKit.UIFont {
  public static var title: UIKit.UIFont
  public static var subTitle: UIKit.UIFont
  public static var regular: UIKit.UIFont
  public static var light: UIKit.UIFont
  public static func title(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func subTitle(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func regular(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
  public static func light(_ size: CoreFoundation.CGFloat) -> UIKit.UIFont
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init(radius: CoreFoundation.CGFloat = 0, color: UIKit.UIColor = .clear)
  @_Concurrency.MainActor(unsafe) public var screenHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var screenWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public func shadow(color: UIKit.UIColor = UIColor(white: 0.5, alpha: 1.0), offset: CoreFoundation.CGSize = .zero, radius: CoreFoundation.CGFloat = 4.0, opacity: Swift.Float = 1.0)
}
extension UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) public static var identifier: Swift.String {
    get
  }
}
extension UIKit.UITableView {
  @_Concurrency.MainActor(unsafe) public func registerCell(type: UIKit.UITableViewCell.Type)
  @_Concurrency.MainActor(unsafe) public func dequeueCell<T>(withType type: UIKit.UITableViewCell.Type) -> T? where T : UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) public func dequeueCell<T>(withType type: UIKit.UITableViewCell.Type, for indexPath: Foundation.IndexPath) -> T? where T : UIKit.UITableViewCell
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) convenience public init(placeholder: Swift.String = "", font: UIKit.UIFont = .subTitle, bgColor: UIKit.UIColor = .bgColor, radius: CoreFoundation.CGFloat = 0, border: CoreFoundation.CGFloat = 0, borderColor: UIKit.UIColor = .clear, padding: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor(unsafe) public func showError(_ message: Swift.String, color: UIKit.UIColor = .failure)
  @_Concurrency.MainActor(unsafe) public func hideError(completion: (() -> Swift.Void)? = nil)
}
extension CoreFoundation.CGFloat {
  public static let standardRadius: CoreFoundation.CGFloat
  public static let inversePadding: CoreFoundation.CGFloat
  public static let buttonHeight: CoreFoundation.CGFloat
  public static let lineHeight: CoreFoundation.CGFloat
  public static let padding: CoreFoundation.CGFloat
  public static func padding(_ multiplier: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
}
extension Foundation.DateFormatter {
  public static var full: Foundation.DateFormatter {
    get
  }
  public static var short: Foundation.DateFormatter {
    get
  }
  public static var standard: Foundation.DateFormatter {
    get
  }
  public static var inverse: Foundation.DateFormatter {
    get
  }
}
extension UIKit.UIImage {
  public static func system(named: Swift.String, size: CoreFoundation.CGFloat) -> UIKit.UIImage?
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var safeArea: UIKit.UILayoutGuide {
    get
  }
  @_Concurrency.MainActor(unsafe) public func pushVC(_ viewController: UIKit.UIViewController, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func popVC(animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func showToast(type: UIConfig.ToastType, message: Swift.String, time: Foundation.TimeInterval = 3.0)
  @_Concurrency.MainActor(unsafe) public func showLoading()
  @_Concurrency.MainActor(unsafe) public func hideLoading()
}
public enum AlertType {
  case success
  case error
  case info
  case warning
  public static func == (a: UIConfig.AlertType, b: UIConfig.AlertType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol GenericAlertDelegate : AnyObject {
  func willShowAlert(alert: UIConfig.GenericAlert)
  func didShowAlert(alert: UIConfig.GenericAlert)
  func willEndShowingAlert(alert: UIConfig.GenericAlert)
  func didEndShowingAlert(alert: UIConfig.GenericAlert)
}
extension UIConfig.GenericAlertDelegate {
  public func willShowAlert(alert: UIConfig.GenericAlert)
  public func didShowAlert(alert: UIConfig.GenericAlert)
  public func willEndShowingAlert(alert: UIConfig.GenericAlert)
  public func didEndShowingAlert(alert: UIConfig.GenericAlert)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class GenericAlert : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any UIConfig.GenericAlertDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(alertTitle: Swift.String, message: Swift.String, textAlignment: UIKit.NSTextAlignment = .center, okTitle: Swift.String = "Accept", type: UIConfig.AlertType, color: UIKit.UIColor? = nil, imageColor: UIKit.UIColor? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol MultipleSelectionDelegate : AnyObject {
  func didCancel(selection: UIConfig.MultipleSelection)
  func didSelect(items: [UIConfig.SelectionItem], on selection: UIConfig.MultipleSelection)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MultipleSelection : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var items: [UIConfig.SelectionItem]!
  @_Concurrency.MainActor(unsafe) open var titleMessage: Swift.String!
  @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor!
  @_Concurrency.MainActor(unsafe) open var minItemSelection: Swift.Int
  @_Concurrency.MainActor(unsafe) open var maxItemSelection: Swift.Int?
  @_Concurrency.MainActor(unsafe) open var tag: Swift.Int
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any UIConfig.MultipleSelectionDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(with items: [UIConfig.SelectionItem], titleMessage: Swift.String, acceptTitle: Swift.String = "Accept", color: UIKit.UIColor = .systemBlue)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) open func selectIndexes(_ indexes: [Swift.Int])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIConfig.MultipleSelection : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension Foundation.Bundle {
  public static var local: Foundation.Bundle {
    get
  }
}
extension Foundation.Date {
  public func isSameDayAs(_ date: Foundation.Date) -> Swift.Bool
  public func isSameMonthAs(_ date: Foundation.Date) -> Swift.Bool
  public func isSameYearAs(_ date: Foundation.Date) -> Swift.Bool
}
open class SelectionItem {
  open var title: Swift.String
  open var icon: UIKit.UIImage?
  open var subTitle: Swift.String?
  public init(title: Swift.String, subTitle: Swift.String? = nil, icon: UIKit.UIImage? = nil)
  @objc deinit
}
public protocol RadiusDelegate : AnyObject {
  func didCancel(selection: UIConfig.RadiusSelection)
  func didSelect(item: UIConfig.SelectionItem, on selection: UIConfig.RadiusSelection)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class RadiusSelection : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var items: [UIConfig.SelectionItem]!
  @_Concurrency.MainActor(unsafe) open var titleMessage: Swift.String!
  @_Concurrency.MainActor(unsafe) open var color: UIKit.UIColor!
  @_Concurrency.MainActor(unsafe) open var tag: Swift.Int
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any UIConfig.RadiusDelegate)?
  @_Concurrency.MainActor(unsafe) convenience public init(with items: [UIConfig.SelectionItem], titleMessage: Swift.String, acceptTitle: Swift.String = "Accept", color: UIKit.UIColor = .systemBlue)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) open func selectIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIConfig.RadiusSelection : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(name: Swift.String, isSystem: Swift.Bool = true, size: CoreFoundation.CGFloat = 0, tint: UIKit.UIColor = .textColor)
  @_Concurrency.MainActor(unsafe) public var imageCache: Foundation.NSCache<Swift.AnyObject, UIKit.UIImage> {
    get
  }
  @_Concurrency.MainActor(unsafe) public func cacheImage(urlString: Swift.String?, renderingMode: UIKit.UIImage.RenderingMode = .automatic)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String, color: UIKit.UIColor = .systemBlue, bgColor: UIKit.UIColor = .clear, isBordered: Swift.Bool = false, border: UIKit.UIColor = .clear, width: CoreFoundation.CGFloat = 0.0, radius: CoreFoundation.CGFloat = 0.0)
  @_Concurrency.MainActor(unsafe) convenience public init(image: Swift.String, isSystem: Swift.Bool = false, size: CoreFoundation.CGFloat = 30, color: UIKit.UIColor = .textColor)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pressedDown()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func pressedUp()
}
extension UIConfig.ToastType : Swift.Equatable {}
extension UIConfig.ToastType : Swift.Hashable {}
extension UIConfig.AlertType : Swift.Equatable {}
extension UIConfig.AlertType : Swift.Hashable {}
